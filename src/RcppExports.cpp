// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// netAlign
arma::sp_mat netAlign(arma::sp_mat A, arma::sp_mat B, arma::sp_mat L, double alpha, double beta, double gamma, int maxiter, bool finalize);
RcppExport SEXP _netAlignR_netAlign(SEXP ASEXP, SEXP BSEXP, SEXP LSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP maxiterSEXP, SEXP finalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type finalize(finalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(netAlign(A, B, L, alpha, beta, gamma, maxiter, finalize));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_netAlignR_netAlign", (DL_FUNC) &_netAlignR_netAlign, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_netAlignR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
